---
# roles/ironic/tasks/ha.yml

- name: Config ironic iptables for ironic-api
  iptables:
    action: insert
    chain: INPUT
    jump: ACCEPT
    source: '{{ network_openstack.management.cidr }}'
    protocol: tcp
    match: multiport
    destination_port: '{{ openstack_ironic.port.api_ha }}'
  delegate_to: "{{ outer_item }}"
  tags:
    - ironic_ha

- name: Config ironic iptables for ironic-api-provision
  iptables:
    action: insert
    chain: INPUT
    jump: ACCEPT
    source: '{{ network_openstack_baremetal.provision.cidr }}'
    protocol: tcp
    match: multiport
    destination_port: '{{ openstack_ironic.port.api_provision_ha }}'
  delegate_to: "{{ outer_item }}"
  tags:
    - ironic_ha


- name: Config ironic iptables for port 80
  iptables:
    action: insert
    chain: INPUT
    jump: ACCEPT
    source: "{{ item }}"
    protocol: tcp
    match: multiport
    destination_port: 80
  loop:
    - {{ network_openstack.management.cidr }}
    - {{ network_openstack_baremetal.provision.cidr }}
  delegate_to: "{{ outer_item }}"
  tags:
    - ironic_ha

- name: Insert tcp rule to /etc/sysconfig/iptables for ironic
  blockinfile:
    path: /etc/sysconfig/iptables
    marker: '# {mark} iptables for ironic ha port {mark} #'
    insertafter: '^:OUTPUT ACCEPT '
    block: |
        -A INPUT -s {{ network_openstack.management.cidr }} -p tcp -m multiport --dport {{ openstack_ironic.port.api_ha }} -j ACCEPT
        -A INPUT -s {{ network_openstack.management.cidr }} -p tcp -m multiport --dport 80 -j ACCEPT
        -A INPUT -s {{ network_openstack_baremetal.provision.cidr }} -p tcp -m multiport --dport {{ openstack_ironic.port.api_provision_ha }} -j ACCEPT
        -A INPUT -s {{ network_openstack_baremetal.provision.cidr }} -p tcp -m multiport --dport 80 -j ACCEPT
  delegate_to: "{{ outer_item }}"
  tags:
    - ironic_ha

- name: Insert ironic into haproxy info /etc/haproxy/haproxy.cfg
  blockinfile:
    path: /etc/haproxy/haproxy.cfg
    marker: '# {mark} listen for OpenStack Ironic {mark}'
    state: present
    block: |
        listen ironic_api
          bind {{ ironic_api_host }}:{{ ironic_api_port }}
          balance roundrobin
          option  tcpka
          option  httpchk
          option  httplog
          {% for item in groups['ironic'] %}
          server node-{{ loop.index }} {{ item }}:{{ openstack_ironic.port.api }}  check inter 2000 rise 2 fall 5
          {% endfor %}

        listen ironic_api_provision
          bind {{ ironic_api_provision_host }}:{{ ironic_api_provision_port }}
          balance roundrobin
          option  tcpka
          option  httpchk
          option  httplog
          {% for item in  groups['ironic']%}
          server node-{{ loop.index }} {{ hostvars[item]['ansible_' + network_openstack_baremetal.provision.interface]['ipv4']['address'] }}:{{ openstack_ironic.port.api }}  check inter 2000 rise 2 fall 5
          {% endfor %}
  run_once: true
  notify:
    - Restart haproxy
  delegate_to: "{{ outer_item }}"
  tags:
    - ironic_ha

- name: Gather facts for {{ outer_item }}
  setup:
  delegate_to: "{{ outer_item }}"
  delegate_facts: true
  tags:
    - ironic_ha

- name: Get the target provison interface on {{ outer_item }}
  set_fact:
    ha_provision_interface: "{{ item }}"
  when:
    - hostvars[outer_item]['ansible_' + item]['ipv4'] is defined
    - hostvars[outer_item]['ansible_' + item]['ipv4']['network'] == network_openstack_baremetal.provision.cidr|ipaddr('network')
    - hostvars[outer_item]['ansible_' + item]['ipv4']['netmask'] == network_openstack_baremetal.provision.cidr|ipaddr('netmask')
  loop: "{{ hostvars[outer_item]['ansible_interfaces'] }}"
  tags:
    - ironic_ha

- name: Make sure variable ha_provision_interface is defined
  assert:
    that:
      - ha_provision_interface is defined
    msg: "ha_provision_interface is NOT defined. Please check os_ha node interfaces that satisfy with cidr {{ network_openstack_baremetal.provision.cidr }}"
  tags:
    - ironic_ha

- name: Get addresses of interface {{ ha_provision_interface }} on os_ha group
  set_fact:
    ha_provision_addresses:
      "{% for item in groups['os_ha'] %}\
       {{ hostvars[item]['ansible_' + ha_provision_interface]['ipv4']['address'] }}\
       {% if not loop.last %},{% endif %}\
       {% endfor %}"
  tags:
    - ironic_ha

- name: Config /etc/keepalived/keepalived.conf
  blockinfile:
    path: /etc/keepalived/keepalived.conf
    marker: "# {mark} keepalived config for ironic provision {mark}"
    block: |
      vrrp_instance Ironic_provision {
          interface {{ ha_provision_interface }}
          virtual_router_id {{ vid }}
      {% if hostvars[outer_item]['ansible_' + ha_provision_interface]['ipv4']['address'] == ha_provision_addresses.split(',')|min %}
          priority 100
          nopreempt
      {% else %}
          priority 90
      {% endif %}
          advert_int 1
          authentication {
              auth_type PASS
              auth_pass 2376
          }
          virtual_ipaddress {
              {{ network_openstack_baremetal.provision.vip }}/{{ network_openstack_baremetal.provision.cidr|ipaddr('prefix') }} dev {{ ha_provision_interface }}
          }
          unicast_src_ip {{ hostvars[outer_item]['ansible_' + ha_provision_interface]['ipv4']['address'] }}
          unicast_peer {
      {% if hostvars[outer_item]['ansible_' + ha_provision_interface]['ipv4']['address'] == ha_provision_addresses.split(',')|min %}
               {{ ha_provision_addresses.split(',')|max }}
      {% else %}
               {{ ha_provision_addresses.split(',')|min }}
      {% endif %}
                       }
          track_script {
               chk_http_port
           }
      }
  notify:
    - Restart keepalived
  delegate_to: "{{ outer_item }}"
  tags:
    - ironic_ha
